{"version":3,"sources":["views/pages/authentication/Register.js"],"names":["defaultValues","email","terms","username","password","Register","useState","recaptcha","setRecaptcha","ability","useContext","AbilityContext","skin","useSkin","history","useHistory","dispatch","useDispatch","useForm","control","setError","handleOnChange","value","handleSubmit","errors","formState","illustration","source","require","default","className","to","onClick","e","preventDefault","src","image","alt","lg","sm","md","tag","action","onSubmit","data","auth","getAuth","tempData","Object","values","every","field","length","useJwt","register","then","res","createUserWithEmailAndPassword","cred","sendEmailVerification","user","error","property","type","message","accessToken","update","handleLogin","push","catch","err","console","log","key","for","id","name","render","autoFocus","placeholder","invalid","checked","href","target","sitekey","onChange","block","color"],"mappings":"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","file":"static/js/31.773163ae.chunk.js","sourcesContent":["// ** React Imports\nimport { useContext, useState } from 'react'\nimport { Link, Redirect, useHistory } from 'react-router-dom'\nimport image from '@src/assets/images/logo/favicon.png'\nimport { getAuth, createUserWithEmailAndPassword, sendEmailVerification} from '@firebase/auth'\nimport '@src/firebase'\nimport ReCAPTCHA from 'react-google-recaptcha'\n// ** Custom Hooks\nimport { useSkin } from '@hooks/useSkin'\nimport useJwt from '@src/auth/jwt/useJwt'\n\n// ** Store & Actions\nimport { useDispatch } from 'react-redux'\nimport { handleLogin } from '@store/authentication'\n\n// ** Third Party Components\nimport { useForm, Controller } from 'react-hook-form'\n\n// ** Context\nimport { AbilityContext } from '@src/utility/context/Can'\n\n// ** Custom Components\nimport InputPasswordToggle from '@components/input-password-toggle'\n\n// ** Reactstrap Imports\nimport { Row, Col, CardTitle, CardText, Label, Button, Form, Input, FormFeedback } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/pages/page-authentication.scss'\n\nconst defaultValues = {\n  email: '',\n  terms: false,\n  username: '',\n  password: ''\n}\n\n \nconst Register = () => {\n  const [recaptcha, setRecaptcha] = useState(\"\")\n\n function onChange(value) {\n setRecaptcha(value)\n}\n  // ** Hooks\n  const ability = useContext(AbilityContext)\n  const { skin } = useSkin()\n  const history = useHistory()\n  const dispatch = useDispatch()\n  const {\n    control,\n    setError,\n    handleOnChange = onChange,\n    handleSubmit,\n    formState: { errors }\n  } = useForm({ defaultValues })\n\n  const illustration = skin === 'dark' ? 'register-v2-dark.svg' : 'register-v2.svg',\n    source = require(`@src/assets/images/pages/${illustration}`).default\n\n  const onSubmit = data => {\n       const auth = getAuth()\n    const tempData = { ...data, recaptcha }\n    delete tempData.terms\n    if (Object.values(tempData).every(field => field.length > 0) && data.terms === true) {\n      const { username, email, password } = data\n      useJwt\n        .register({ username, email, password })\n        .then(res => {\n            createUserWithEmailAndPassword(auth, email, password)\n              .then((cred) => sendEmailVerification(cred.user))\n       \n          if (res.data.error) {\n            for (const property in res.data.error) {\n              if (res.data.error[property] !== null) {\n                setError(property, {\n                  type: 'manual',\n                  message: res.data.error[property]\n                })\n              }\n            }\n          } else {\n            const data = { ...res.data.user, accessToken: res.data.accessToken }\n            ability.update(res.data.user.ability)\n            dispatch(handleLogin(data))\n            history.push(`./verify-email-cover/${email}`)\n          }\n        })\n        .catch(err => console.log(err))\n    } else {\n      for (const key in data) {\n        if (data[key].length === 0) {\n          setError(key, {\n            type: 'manual',\n            message: `Please enter a valid ${key}`\n          })\n        }\n        if (key === 'terms' && data.terms === false) {\n          setError('terms', {\n            type: 'manual'\n          })\n        }\n      }\n    }\n  }\n\n  return (\n    <div className='auth-wrapper auth-cover'>\n      <Row className='auth-inner m-0'>\n        <Link className='brand-logo' to='/' onClick={e => e.preventDefault()}>\n        <img src={image} alt='logo'/>\n          <h2 className='brand-text text-primary ms-1'>Coin Mercari</h2>\n        </Link>\n        <Col className='d-none d-lg-flex align-items-center p-5' lg='8' sm='12'>\n          <div className='w-100 d-lg-flex align-items-center justify-content-center px-5'>\n            <img className='img-fluid' src={source} alt='Login Cover' />\n          </div>\n        </Col>\n        <Col className='d-flex align-items-center auth-bg px-2 p-lg-5' lg='4' sm='12'>\n          <Col className='px-xl-2 mx-auto' sm='8' md='6' lg='12'>\n            <CardTitle tag='h2' className='fw-bold mb-1'>\n              Adventure starts here ðŸš€\n            </CardTitle>\n            <CardText className='mb-2'>Make your investment easy and fun!</CardText>\n\n            <Form action='/' className='auth-register-form mt-2' onSubmit={handleSubmit(onSubmit)}>\n              <div className='mb-1'>\n                <Label className='form-label' for='register-username'>\n                  Username\n                </Label>\n                <Controller\n                  id='username'\n                  name='username'\n                  control={control}\n                  render={({ field }) => (\n                    <Input autoFocus placeholder='johndoe' invalid={errors.username && true} {...field} />\n                  )}\n                />\n                {errors.username ? <FormFeedback>{errors.username.message}</FormFeedback> : null}\n              </div>\n              <div className='mb-1'>\n                <Label className='form-label' for='register-email'>\n                  Email\n                </Label>\n                <Controller\n                  id='email'\n                  name='email'\n                  control={control}\n                  render={({ field }) => (\n                    <Input type='email' placeholder='john@example.com' invalid={errors.email && true} {...field} />\n                  )}\n                />\n                {errors.email ? <FormFeedback>{errors.email.message}</FormFeedback> : null}\n              </div>\n              <div className='mb-1'>\n                <Label className='form-label' for='register-password'>\n                  Password\n                </Label>\n                <Controller\n                  id='password'\n                  name='password'\n                  control={control}\n                  render={({ field }) => (\n                    <InputPasswordToggle className='input-group-merge' invalid={errors.password && true} {...field} />\n                  )}\n                />\n              </div>\n              <div className='form-check mb-1'>\n                <Controller\n                  name='terms'\n                  control={control}\n                  render={({ field }) => (\n                    <Input {...field} id='terms' type='checkbox' checked={field.value} invalid={errors.terms && true} />\n                  )}\n                />\n                <Label className='form-check-label' for='terms'>\n                  I agree to\n                  <a className='ms-25' href='https://coinmercari.com/index.html#whitepaper/' target='_blank' onClick={e => e.preventDefault()}>\n                    privacy policy & terms\n                  </a>\n                </Label>\n              </div>\n              <ReCAPTCHA\n      sitekey=\"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\"\n      onChange = { handleOnChange }\n               />\n               <div>\n               <br></br>\n               </div>\n              <Button type='submit' block color='primary' >\n                Sign up\n              </Button>\n            </Form>\n            <p className='text-center mt-2'>\n              <span className='me-25'>Already have an account?</span>\n              <Link to='/login'>\n                <span>Sign in instead</span>\n              </Link>\n            </p>\n           \n          </Col>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default Register\n"],"sourceRoot":""}